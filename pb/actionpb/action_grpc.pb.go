// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: pb/actionpb/action.proto

package actionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionProcessorClient is the client API for ActionProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionProcessorClient interface {
	ActionProcessV1(ctx context.Context, in *ActionProcessV1Request, opts ...grpc.CallOption) (*ActionProcessV1Response, error)
}

type actionProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewActionProcessorClient(cc grpc.ClientConnInterface) ActionProcessorClient {
	return &actionProcessorClient{cc}
}

func (c *actionProcessorClient) ActionProcessV1(ctx context.Context, in *ActionProcessV1Request, opts ...grpc.CallOption) (*ActionProcessV1Response, error) {
	out := new(ActionProcessV1Response)
	err := c.cc.Invoke(ctx, "/action.ActionProcessor/ActionProcessV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionProcessorServer is the server API for ActionProcessor service.
// All implementations should embed UnimplementedActionProcessorServer
// for forward compatibility
type ActionProcessorServer interface {
	ActionProcessV1(context.Context, *ActionProcessV1Request) (*ActionProcessV1Response, error)
}

// UnimplementedActionProcessorServer should be embedded to have forward compatible implementations.
type UnimplementedActionProcessorServer struct {
}

func (UnimplementedActionProcessorServer) ActionProcessV1(context.Context, *ActionProcessV1Request) (*ActionProcessV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionProcessV1 not implemented")
}

// UnsafeActionProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionProcessorServer will
// result in compilation errors.
type UnsafeActionProcessorServer interface {
	mustEmbedUnimplementedActionProcessorServer()
}

func RegisterActionProcessorServer(s grpc.ServiceRegistrar, srv ActionProcessorServer) {
	s.RegisterService(&ActionProcessor_ServiceDesc, srv)
}

func _ActionProcessor_ActionProcessV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionProcessV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionProcessorServer).ActionProcessV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/action.ActionProcessor/ActionProcessV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionProcessorServer).ActionProcessV1(ctx, req.(*ActionProcessV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionProcessor_ServiceDesc is the grpc.ServiceDesc for ActionProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "action.ActionProcessor",
	HandlerType: (*ActionProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionProcessV1",
			Handler:    _ActionProcessor_ActionProcessV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/actionpb/action.proto",
}
